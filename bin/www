#!/usr/bin/env node

const app = require('../config/app.js');
const http  = require('http');
const config  = require('config');
const logger  = require('../config/logger');

const {protocol, hostname, port} = config.get('app');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) return val;

  if (port >= 0) return port;

  return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
    logger.error(error, 'app');

    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        break;
        default:
            throw error;
    }
};

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    logger.info(`Listening on ${protocol}://${hostname}:${port}`, 'app');
}

const normalizedPort = normalizePort(process.env.PORT || '8000');

app.set('protocol', protocol);
app.set('host', hostname);
app.set('port', normalizedPort);

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
